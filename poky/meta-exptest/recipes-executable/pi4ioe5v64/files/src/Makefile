# CC = g++
# CFLAGS = -Wall -O2
# LDFLAGS =

# SRC = main.cpp pi4ioe5v64xx.cpp i2c.cpp
# TARGET = pi4ioe5v64

# all: $(TARGET)

# $(TARGET): $(SRC)
# 	$(CC) $(CFLAGS) -o $@ $(SRC) $(LDFLAGS)

# clean:
# 	rm -f $(TARGET)

# Použijte proměnnou CC, kterou Yocto předává pro křížovou kompilaci.


# CC ?= ${CXX}
# CFLAGS ?= -I${STAGING_INCDIR} -Wall -Werror
# LDFLAGS ?= -L${STAGING_LIBDIR}
# LDFLAGS += -Wl,--trace

# OBJS = main.o pi4ioe5v64xx.o i2c.o
# BIN = pi4ioe5v64

# default: check_libs $(BIN)

# check_libs:

# $(BIN): $(OBJS)
# 	$(CC) $(CFLAGS) -o $@ $(OBJS) $(LDFLAGS)

# %.o: %.cpp
# 	$(CC) $(CFLAGS) -c $< -o $@

# %.o: %.c
# 	$(CC) $(CFLAGS) -c $< -o $@

# clean:
# 	rm -f $(BIN) $(OBJS)

# .PHONY: default clean check_libs
